---
description: 
globs: 
alwaysApply: true
---
Project: an AlphaGo-inspired MCTS for the abstract strategy game 'WallWars'.

## Self-play (C++)

The ResNet model used for inference is compiled into an optimized form using TensorRT and self-play is done in C++.

The CMAKE setup is in [CMakeLists.txt](mdc:CMakeLists.txt) and [CMakePresets.json](mdc:CMakePresets.json).

Dependencies:
* folly (for coroutines, logging, thread pools, and more)
* CUDA & TensorRT (for inference)

Optional:
* Catch2 v3 (for unit tests)

## Training (Python)

A new model can be trained using `scripts/training.py` (by default it assumes you're executing it from the `scripts` folder as your working directory). It has relatively self-explanatory command line arguments.

Dependencies:
* PyTorch (for model creation) w/ onnx (for exporting)
* fastai  (for training)




